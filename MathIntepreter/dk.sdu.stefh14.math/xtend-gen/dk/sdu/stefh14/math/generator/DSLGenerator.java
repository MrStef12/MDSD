/**
 * generated by Xtext 2.13.0
 */
package dk.sdu.stefh14.math.generator;

import com.google.common.collect.Iterators;
import dk.sdu.stefh14.math.dSL.Div;
import dk.sdu.stefh14.math.dSL.Exp;
import dk.sdu.stefh14.math.dSL.ExpOp;
import dk.sdu.stefh14.math.dSL.MathExp;
import dk.sdu.stefh14.math.dSL.Minus;
import dk.sdu.stefh14.math.dSL.Mult;
import dk.sdu.stefh14.math.dSL.Parenthesis;
import dk.sdu.stefh14.math.dSL.Plus;
import dk.sdu.stefh14.math.dSL.Primary;
import java.util.Arrays;
import javax.swing.JOptionPane;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DSLGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    final int result = this.compute(math);
    CharSequence _display = this.display(math);
    String _plus = ("Math expression = " + _display);
    System.out.println(_plus);
    JOptionPane.showMessageDialog(null, ("result = " + Integer.valueOf(result)), "Math Language", JOptionPane.INFORMATION_MESSAGE);
  }
  
  public int compute(final MathExp math) {
    return this.computeExp(math.getExp());
  }
  
  public int computeExp(final Exp exp) {
    int _xblockexpression = (int) 0;
    {
      final int left = this.computePrim(exp.getLeft());
      int _switchResult = (int) 0;
      ExpOp _operator = exp.getOperator();
      boolean _matched = false;
      if (_operator instanceof Plus) {
        _matched=true;
        int _computeExp = this.computeExp(exp.getRight());
        _switchResult = (left + _computeExp);
      }
      if (!_matched) {
        if (_operator instanceof Minus) {
          _matched=true;
          int _computeExp = this.computeExp(exp.getRight());
          _switchResult = (left - _computeExp);
        }
      }
      if (!_matched) {
        if (_operator instanceof Mult) {
          _matched=true;
          int _computeExp = this.computeExp(exp.getRight());
          _switchResult = (left * _computeExp);
        }
      }
      if (!_matched) {
        if (_operator instanceof Div) {
          _matched=true;
          int _computeExp = this.computeExp(exp.getRight());
          _switchResult = (left / _computeExp);
        }
      }
      if (!_matched) {
        _switchResult = left;
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
  
  protected int _computePrim(final dk.sdu.stefh14.math.dSL.Number factor) {
    return factor.getValue();
  }
  
  protected int _computePrim(final Parenthesis factor) {
    return this.computeExp(factor.getExp());
  }
  
  public CharSequence display(final MathExp math) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Math[");
    CharSequence _displayExp = this.displayExp(math.getExp());
    _builder.append(_displayExp);
    _builder.append("]");
    return _builder;
  }
  
  public CharSequence displayExp(final Exp exp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Exp[");
    CharSequence _displayPrim = this.displayPrim(exp.getLeft());
    _builder.append(_displayPrim);
    _builder.append(",");
    ExpOp _operator = exp.getOperator();
    String _displayOp = null;
    if (_operator!=null) {
      _displayOp=this.displayOp(_operator);
    }
    _builder.append(_displayOp);
    _builder.append(",");
    Exp _right = exp.getRight();
    CharSequence _displayExp = null;
    if (_right!=null) {
      _displayExp=this.displayExp(_right);
    }
    _builder.append(_displayExp);
    _builder.append("]");
    return _builder;
  }
  
  protected String _displayOp(final Plus op) {
    return "+";
  }
  
  protected String _displayOp(final Minus op) {
    return "-";
  }
  
  protected String _displayOp(final Mult op) {
    return "*";
  }
  
  protected String _displayOp(final Div op) {
    return "/";
  }
  
  public CharSequence displayFactor(final Primary primary) {
    return "?";
  }
  
  protected CharSequence _displayPrim(final dk.sdu.stefh14.math.dSL.Number prim) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Num[");
    int _value = prim.getValue();
    _builder.append(_value);
    _builder.append("]");
    return _builder;
  }
  
  protected CharSequence _displayPrim(final Parenthesis pare) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Parenthesis[");
    CharSequence _displayExp = this.displayExp(pare.getExp());
    _builder.append(_displayExp);
    _builder.append("]");
    return _builder;
  }
  
  public int computePrim(final Primary factor) {
    if (factor instanceof dk.sdu.stefh14.math.dSL.Number) {
      return _computePrim((dk.sdu.stefh14.math.dSL.Number)factor);
    } else if (factor instanceof Parenthesis) {
      return _computePrim((Parenthesis)factor);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(factor).toString());
    }
  }
  
  public String displayOp(final ExpOp op) {
    if (op instanceof Div) {
      return _displayOp((Div)op);
    } else if (op instanceof Minus) {
      return _displayOp((Minus)op);
    } else if (op instanceof Mult) {
      return _displayOp((Mult)op);
    } else if (op instanceof Plus) {
      return _displayOp((Plus)op);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(op).toString());
    }
  }
  
  public CharSequence displayPrim(final Primary prim) {
    if (prim instanceof dk.sdu.stefh14.math.dSL.Number) {
      return _displayPrim((dk.sdu.stefh14.math.dSL.Number)prim);
    } else if (prim instanceof Parenthesis) {
      return _displayPrim((Parenthesis)prim);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(prim).toString());
    }
  }
}
